<?php

/**
 * Implements hook_schema().
 */
function directory_schema() {
  $schema['directory_user_term_index'] = array(
    'description' => 'Maintains denormalized information about user/term relationships.',
    'fields' => array(
      'uid' => array(
        'description' => 'The {users}.uid this record tracks.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'tid' => array(
         'description' => 'The term ID.',
         'type' => 'int',
         'unsigned' => TRUE,
         'not null' => TRUE,
         'default' => 0,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the user is active.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'login' => array(
        'description' => 'The Unix timestamp when the user last logged in.',
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default'=> 0,
      ),
    ),
    'indexes' => array(
      'term_user' => array('tid', 'status', 'login'),
      'uid' => array('uid'),
    ),
    'foreign keys' => array(
      'tracked_node' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
      'term' => array(
        'table' => 'taxonomy_term_data',
        'columns' => array('tid' => 'tid'),
      ),
    ),
  );

  return $schema;
}
/*
 * Implements hook_enable
 */
function directory_enable() {
  $t = get_t();

  //create some vocabularies
  $vocabs = array(
    array(
      'name' => 'UA Locations',
      'machine_name' => 'ua_locations',
      'description' => 'Locations at the University of Arizona',
      'hierarchy' => 1,
      'module' => 'directory',
      //'weight' => 1,
    ),
    array(
      'name' => 'UA Organizations',
      'machine_name' => 'ua_orgs',
      'description' => 'Organizations in the UA HR system',
      'hierarchy' => 1,
      'module' => 'directory',
      //'weight' => 3,
    ),
    array(
      'name' => 'UA Affiliations',
      'machine_name' => 'ua_affiliations',
      'description' => 'Ways that people are affiliated with the University of Arizona',
      'hierarchy' => 1,
      'module' => 'directory',
      //'weight' => 2,
    ),
    array(
      'name' => 'SA Interests',
      'machine_name' => 'sa_interests',
      'description' => 'University of Arizona Student Affairs Professional Interests',
      'hierarchy' => 1,
      'module' => 'directory',
      //'weight' => 2,
    ),
    array(
      'name' => 'Alphabet',
      'machine_name' => 'alphabet',
      'description' => 'Notational Convenience',
      'hierarchy' => 0, //flat
      'module' => 'directory',
      //'weight' => 3,
    ),
    array(
      'name' => 'Months',
      'machine_name' => 'months',
      'description' => 'Notational Convenience',
      'hierarchy' => 0, //flat
      'module' => 'directory',
      //'weight' => 3,
    ),
  );
  // Create the term vocabularies and the reference field definitions.
  foreach ($vocabs as $vocab) {
    drupal_set_message($vocab['machine_name']);
    $name_var = $vocab['machine_name'] . '_vocabulary';
    $vocabulary = taxonomy_vocabulary_load(variable_get($name_var, 0));
    if (!$vocabulary) {
      $vocabulary = (object) $vocab;
      taxonomy_vocabulary_save($vocabulary);
      variable_set($name_var, $vocabulary->vid);
      directory_loader($vocab['machine_name']);
    }
    $field = array(
      'field_name' => 'field_' . $vocab['machine_name'],
      'type' => 'taxonomy_term_reference',
      'cardinality' => -1,
      'label' => $vocab['name'],
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => $vocab['machine_name'],
            'parent' => 0,
          ),
        ),
      ),
    );
    field_create_field($field);
    $f = field_info_field($field['field_name']);
    drupal_set_message('Field Definition ' . $f['id'] . ' created.');
  }
}
/*
 * Implements hook_disable
 */
function directory_disable() {
  $vocabs = array(
    'ua_locations',
    'ua_orgs',
    'ua_affiliations',
    'sa_interests',
    'alphabet',
    'months',
  );
  // drop the term vocabularies, unset the variables and the reference field definitions.
  foreach ($vocabs as $vocab) {
      $vid = variable_get($vocab . '_vocabulary', 0);
      if ($vid > 0) {
        taxonomy_vocabulary_delete($vid);
        variable_del($vocab . '_vocabulary');
        //remove the term reference fields for this vocabulary
        field_delete_field('field_' . $vocab);
        field_purge_batch(1000);
      }
  }
}
function directory_loader($vocabulary_name) {
  $vid = variable_get($vocabulary_name . '_vocabulary', 0);
  if ($vid == 0) {
      return FALSE;
  }
  else {
    $count = 0;
    switch ($vocabulary_name) {
      case 'ua_orgs':
        $orgs = _fetch_ua_orgs();
        //result has a bunch of objects in it. Transform the data to an array where each
        //entry is indexed by its dept id and is itself an array.
        if(!empty($orgs)) {
          drupal_set_message('made it past term create loop. orgs has ' . count($orgs) . ' terms.');
          foreach($orgs as $org) {
          _create_term($vocabulary_name, $org['dept_name'], $org['org_id'], $count +1);
          $count++;
          }
        }
      break;
      case 'ua_locations':
      break;
      case 'ua_affiliations':
        $set = array(
          'student',
          'admit',
          'employee',
          'studentworker',
          'gradasst',
          'faculty',
          'staff',
          'affiliate',
          'dcc',
          'retiree',
          'member',
          'former-student',
          'former-employee',
          'former-studentworker',
          'former-gradasst',
          'former-faculty',
          'former-staff',
          'former-affiliate',
          'former-dcc',
          'former-member',
        );
        foreach($set as $letter) {
          _create_term($vocabulary_name, $letter);
          $count++;
        }
      break;
      case 'alphabet':
        $set =  array(
          'A',
          'B',
          'C',
          'D',
          'E',
          'F',
          'G',
          'H',
          'I',
          'J',
          'K',
          'L',
          'M',
          'N',
          'O',
          'P',
          'Q',
          'R',
          'S',
          'T',
          'U',
          'V',
          'W',
          'X',
          'Y',
          'Z',
        );
        foreach($set as $letter) {
          _create_term($vocabulary_name, $letter);
          $count++;
        }
      break;
      case 'months':
        $set =  array(
          'January',
          'February',
          'March',
          'April',
          'May',
          'June',
          'July',
          'August',
          'September',
          'October',
          'November',
          'December',
        );
        foreach($set as $letter) {
          _create_term($vocabulary_name, $letter, '', $count + 1);
          $count++;
        }
      break;
    }
    drupal_set_message('Added ' . $count . ' terms to ' . $vocabulary_name . '.', 'status');
  }
}
/**
 * Create a single term and add to a specific vocabulary if not already present
 *  @vocab - the machine name of the vocabulary
 *  @term - the human readable name of the term to be added
 *
 *  @desc - the humna readable description of the term to be added (Optional)
 *  @weight - the weight of the term in the vocabulary list (Optional)
 */
function _create_term($vocab_name, $term, $desc = '', $weight = 0)  {
  $added = NULL;
  $added = taxonomy_get_term_by_name($term);
  $vid = variable_get($vocab_name . '_vocabulary', 0);
  if ($added == '' || $added == NULL || $vid > 0)  {
    $new_term = array(
      'name' => $term,
      'description' => $desc,
      'parent' => array(0),
      'weight' => $weight,
      'vid' => $vid,
    );
    $term_obj = (object) $new_term;
    taxonomy_term_save($term_obj);
    //in case you want it.
    return $term_obj->tid;
  }
}
/*
 * use sia.uits interface to get the current ua org structure.
 */
function _fetch_ua_orgs($url = '') {
  if ($url == '') {
    //get them all
    $url = 'https://siaapps.uits.arizona.edu/home/orgs/ua_orgs/index.json';
  }
  $objs = array();
  $f = file_get_contents($url);
  if( $f !== FALSE ) {
    $objs = json_decode($f);
    //
    $o = array();
    do {
      $obj = array_pop($objs);
      /* I am going to rebuild the hierarchy to flatten out the object structure a bit.
       * obj.UaOrg, obj.ParentUAOrg, and obj.ChildUAOrg all have internal structure.
       * Rather than step through all of it I am going to rely on the fact that
       * there is a single parent and multiple children.
       * If an object has no children (leaf node) then build it.
       * The remaining nodes are intermediates.
       * Sort the leaves by parent id and build the parent.
       * Then look that id up in 'data' and get its parent.
       * First build the flat terms and ignore internal structure, but
       * Note it. I wrote this earlier in javascript so that's what's below.
       * var element = new orgNode(obj.UaOrg.id, obj.UaOrg.name,
       * obj.UaOrg.parent_id, obj.UaOrg.parent_name);
       */
       //create the term and reference it.
      if ($obj->UaOrg->finOnly != 1 || $obj->UaOrg->hr_code != '') {
        $o[$obj->UaOrg->hr_code] = array(
          'org_id' => $obj->UaOrg->hr_code,
          'dept_name' => $obj->UaOrg->hr_name,
          'org_parent' => $obj->UaOrg->hr_parent_code,
          'org_parent_name' => $obj->UaOrg->hr_parent_name,
        );
        $count++;
      }
    } while (count($objs) > 0);
  }
  drupal_set_message(count($objs) . ' orgs returned, ' . count($o) . ' orgs kept.');
  return $o;
}
