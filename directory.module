<?php

/*
 * Implements hook_node_info
 */
function directory_node_info() {
  return array(
    'directory_profile' => array(
      'name' => t('Directory Profile'),
      'base' => 'directory_profile',
      'description' => t('Directory Information.'),
      'has_title' => TRUE,
      'locked' => FALSE,
    ),
  );
}
/*
 * Implements hook_form
 */
function directory_form($node, &$form_state) {
   return node_content_form($node, $form_state);
}
/*
 * Implements hook_form_alter
 */
function directory_form_alter(&$form, &$form_state, $form_id) {
    if ($form_id == 'directory_profile_node_form') {
      drupal_set_message('here in alter');
    }
}

function directory_node_presave($node) {
  if($node->type == 'directory_profile') {
  //The title is <name>
    if(is_null($node->title)){
      if(!empty($node->field_first_name[LANGUAGE_NONE][0]['value']) &&
        !empty($node->field_last_name[LANGUAGE_NONE][0]['value'])) {
          $node->title = $node->field_first_name[LANGUAGE_NONE][0]['value']
            . ' ' . $node->field_last_name[LANGUAGE_NONE][0]['value'];
      }
      else {
        $node->title = 'Directory Entry';
      }
    }
  }

}
/*
 * create_new_ids
 * This will find new users of the site who don't have taxonomy terms
 * corresponding to their user name yet.
 */
function create_new_ids($include_ldap = NULL) {
  //find new users or people who don't have taxonomy terms yet.
  $vid = variable_get('directory_ids_vocabulary', 0);
  $desc = '';
  $tids = array();
  if ($vid>0) {
    $query = 'SELECT u.name FROM {users} u' .
      ' LEFT JOIN {taxonomy_term_data} t ON u.name = t.name' .
      ' WHERE t.name IS NULL AND u.status = 1';
    $result = db_query($query)->fetchAll();
    //dsm($result);
    foreach($result as $record) {
      //$record->name is available
      $new_term = array(
        'name' => $record->name,
        'description' => $desc,
        'vid' => $vid,
      );
      $term_obj = (object) $new_term;
      taxonomy_term_save($term_obj);
      $tids[]=$term_obj->tid;
    }
  }
  if($include_ldap) {

  }
  return $tids;
}
/*
 * Query Ldap
 * I don't like this because it opens and closes the connection in the
 * function which seems like unecessary overhead.
 * TODO: support multiply valued fields
 */
function directory_query_ldap($depts = array()) {

    if(count($depts) == 0) {
      $depts[] = '8107';
    }
    $result = array();
    // setup LDAP parameters
    $ldapUrl = "ldaps://eds.arizona.edu";
    $ldapPort = 636;
    $bindDn = "uid=sasg-drupal,ou=App Users,dc=eds,dc=arizona,dc=edu";
    $bindPw = "Jm2GvdiyeSQKB7UL8zeAjmW59Hdz2yAP";
    $searchBase = "ou=People,dc=eds,dc=arizona,dc=edu";
    //$searchFilter = "(uid=bourgeot)";
  $deptStr ='(|';
  //dsm($depts);
  foreach($depts as $dept) {
    $deptStr .= '(employeePrimaryDept=' . $dept . ')';
  }
  $deptStr .= ')';

  $filter = '(&(employeeStatus=A)(!(uaid=T*))' . $deptStr . ')';
  $field_map = array(
    //set up text fields
    'placeholder' => 'placeholder',
    'givenName' => 'field_first_name',
    'sn'=> 'field_last_name',
    'dateOfBirth'=> 'field_birthday',
    'employeePrimaryTitle' => 'field_primary_title',
    'mail'=> 'field_ua_email',
    'employeePhone' => 'field_primary_phone',
    'employeeBldgName'=> 'field_ua_locations',
    'employeeBldgNum'=> 'field_ua_locations_desc',
    //dept
    'employeePrimaryDeptName'=> 'field_ua_organizations',
    //affiliation
    'eduPersonPrimaryAffiliation'=> 'field_ua_affiliations',
    'uid' => 'field_directory_ids',
  );
  $attrs = array_keys($field_map);

  // establish LDAP connection
  $ldap = ldap_connect($ldapUrl,$ldapPort);
  if (! $ldap) {
    error_log("Could not connect to LDAP server");
  }
  // bind as app user
  if (! ldap_bind($ldap, $bindDn, $bindPw)) {
    error_log(ldap_error($ldap));
  }
  // retrieve entry
  $i=0;
  $sr = ldap_search($ldap, $searchBase, $filter, $attrs);
  $e=ldap_get_entries($ldap,$sr);
  $entry = ldap_first_entry($ldap, $sr);
  while ($entry) {
      foreach($attrs as $attr) {
        if ($attr != 'placeholder') {
          $vals = ldap_get_values($ldap, $entry, $attr);
        //$attrs = ldap_get_attributes($ldap, $entry);
      //dsm($vals);
      //dsm($attrs);
        //$results[] = $attrs;
      //$i++;
          $result[$i][$field_map[$attr]]=$vals[0];
        }
      }
      $i++;
    $entry = ldap_next_entry($ldap, $entry);
  }

  ldap_close($ldap);
  return $result;
}


function directory_create_dept_profile_nodes($dept_num, $override = FALSE) {
    $entries = directory_query_ldap(array($dept_num));
    //dsm($entries);
    foreach ($entries as $entry) {
      //only create nodes for rows with uids
      if(!empty($entry['field_directory_ids'])) {
        //see if we have run into it before
        $tq = db_query("SELECT tid FROM {taxonomy_term_data} WHERE name = :name",
          array(':name' => $entry['field_directory_ids'])) -> fetchField();
        if(!empty($tq)) {
          //we have. get the nid.
          $n = db_query("SELECT nid FROM {taxonomy_index} WHERE tid = :tid",
          array(':tid' => $tq)) -> fetchField();
          directory_update_profile_node(node_load($n), $entry, $override);
          drupal_set_message('Node already exists...updated');
        }
        else {
          //nope
          $node = directory_create_profile_node($entry);
        }
      }
      //dsm($node->title . ' created.');
    }
    drupal_set_message('created entries for department: ' . $dept_num);
}
function directory_update_profile_node($node, $updates = array(), $override = FALSE) {
  //update has the form key=>value where the key is the node field
  //to update and the value is the token to update it with
  //default mode is to only update a value if it is empty unless override is true,
  //and then everything will be updated.

  if(!empty($updates)) {
    //fetch the fields associated with the node type.
    $fields = field_info_instances('node', $node->type);  //directory_profile
    foreach ($fields as $field_name => $properties) {
      $field_info = field_info_field($field_name);
      $type = $field_info['type'];
      //dsm($fields);
      foreach($updates as $node_field=>$update) {
       // dsm($node_field . ' and ' . $field_name);
        if($node_field == $field_name) {
          //match
          //dsm('match ' . $node_field);
            switch ($type) {
              case 'taxonomy_term_reference':
              break;
              case 'text':
                if ($override) {
                  $node->$node_field[LANGUAGE_NONE][0]['value'] = $updates[$field_name];
                }
                else {
                  if (empty($node->$node_field)) {
                    //dsm('here: ' . $node->title);
                    //dsm($node_field . ' is empty');
                    //field_attach_load('node',
                    //  array($node->nid => array('bundle' => $node->type, 'id' => $node->nid)),
                    //  FIELD_LOAD_CURRENT,
                    //  array('field_id'=> $properties['field_id']));
                    $v = array( LANGUAGE_NONE => array(array('value'=>$updates[$field_name])));
                    //$node->$node_field[LANGUAGE_NONE][]['value'] = $updates[$field_name];
                    $node->$node_field = $v;
                    //dsm($v);
                    //dsm($node);
                  }
                }
              break;
              case 'datetime':
              break;
              case 'int':
              break;
            }
        }
      }
    }
  }
  node_save($node);
  return $node;
}

/*
 * directory_create_profile_node
 * This creates the node. Likely this will have to become a hook in order to
 * make it extensible.
 */

function directory_create_profile_node($p) {
  //creates a profile node for $p.
/*
0 (Array, 9 elements)
    sn (String, 8 characters ) Rallison
    givenName (String, 17 characters ) Gabriel Kartchner
    eduPersonPrimaryAffiliation (String, 7 characters ) student
    uid (String, 8 characters ) rallison
    dateOfBirth (String, 8 characters ) 19901219
    employeeBldgNum (String, 4 characters ) 409A
    employeeBldgName (String, 28 characters ) Enrollment Mngmt Systems Grp
    employeePhone (String, 10 characters ) 5206260755
    employeePrimaryTitle (String, 15 characters ) Student Group B

  $field_map = array(
    //set up text fields
    'placeholder' => 'placeholder',
    'givenName' => 'field_first_name',
    'sn'=> 'field_last_name',
    'dateOfBirth'=> 'field_birthday',
    'employeePrimaryTitle' => 'field_primary_title',
    'mail'=> 'field_ua_email',
    'employeePhone' => 'field_primary_phone',
    'employeeBldgName'=> 'field_ua_locations',
    'employeeBldgNum'=> 'field_ua_locations_desc',
    //dept
    'employeePrimaryDeptName'=> 'field_department',
    //affiliation
    'eduPersonPrimaryAffiliation'=> 'field_ua_affiliations',
    'uid' => 'field_directory_id',
  );

*/
  //make sure $p is an array
  //setup a new node
  $node = new stdClass();
  $node->type = 'directory_profile';
  $node->language = LANGUAGE_NONE;
  $node->nid = NULL;
  //$node_copy->vid = NULL;
  //$node_copy->tnid = NULL;
  //$node_copy->created = NULL;
  //$node_copy->path = NULL;
  $node->uid = 1; //created by user 1 initially
  $node->log = 'created programmatically';
  $node->status = 1;
  $node->comment = 0;
  $node->promote = 0;
  $node->sticky = 0;
  $node->title = 'Directory Profile';
  node_save($node);
  if($node->nid != NULL) {
    //node_load($node);
    //dsm($node);
    if(!empty($p['field_first_name']) && !empty($p['field_last_name'])) {
      $node->title = $p['field_first_name'] . ' ' . $p['field_last_name'];
    }
    else {
      $node->title = $p['field_directory_id'];
    }
    //set up text fields
    $node->field_first_name[LANGUAGE_NONE][0]['value'] = $p['field_first_name'];
    $node->field_last_name[LANGUAGE_NONE][0]['value'] = $p['field_last_name'];
    $node->field_birthday[LANGUAGE_NONE][0]['value']=
      substr($p['field_birthday'], 4, 2) . '/' . substr($p['field_birthday'], 6, 2);
    $node->field_primary_title[LANGUAGE_NONE][0]['value'] = $p['field_primary_title'];
    $node->field_ua_email[LANGUAGE_NONE][0]['value'] = $p['field_ua_email'];
    $node->field_primary_phone[LANGUAGE_NONE][0]['value'] = $p['field_primary_phone'];
    //set up for fetching terms from the varaious vocabularies.
    //find the location or add it if it hasn't been encountered yet
    $term_array = taxonomy_get_term_by_name($p['field_ua_locations'], 'ua_locations');
    //dsm($term_array);
    if (empty($term_array)) {
      //add it
      $term_obj= directory_create_term('ua_locations', $p['field_ua_locations'], $p['field_ua_locations_desc']);
    }
    else {
      $term_obj = array_shift($term_array);
    }
    //
    $node->field_ua_locations[LANGUAGE_NONE][0]['tid'] = $term_obj->tid;
    //letter
    $term_array = taxonomy_get_term_by_name($p['field_last_name'][0], 'alphabet');
    $term_obj = array_shift($term_array);
    $node->field_alphabet[LANGUAGE_NONE][0]['tid'] = $term_obj->tid;
    //dept
    $term_array = taxonomy_get_term_by_name($p['field_ua_organizations'], 'ua_organizations');
    $term_obj = array_shift($term_array);
    $node->field_ua_organizations[LANGUAGE_NONE][0]['tid'] = $term_obj->tid;
    //affiliation
    $term_array = taxonomy_get_term_by_name($p['field_ua_affiliations'], 'ua_affiliations');
    $term_obj = array_shift($term_array);
    $node->field_ua_affiliations[LANGUAGE_NONE][0]['tid'] = $term_obj->tid;
    //directory id
    $term_array = taxonomy_get_term_by_name($p['field_directory_ids'], 'directory_ids');
    //dsm($term_array);
    if (empty($term_array)) {
      //add it
      $term_obj= directory_create_term('directory_ids',
        $p['field_directory_ids'],
        $p['field_first_name'] . ' ' . $p['field_last_name']);
    }
    else {
      $term_obj = array_shift($term_array);
    }
    $node->field_directory_id[LANGUAGE_NONE][0]['tid'] = $term_obj->tid;
  }
  node_save($node);
  if($node->nid != NULL) {
    return $node;
  }
  else {
    return FALSE;
  }
}
function directory_reset() {
    //delete the content and the directory ids
    $query = new EntityFieldQuery();
    $result = $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'directory_profile')
      ->propertyCondition('status', 1)
      ->execute();
    node_delete_multiple(array_keys($result['node']));
    drupal_set_message('done');
}
/*
 * implements hook_node_delete($node)
 */
function directory_node_delete($node) {
    //remove the directory_id term associated with the profile node.
    if($node->type == 'directory_profile' && isset($node->field_directory_ids) ) {
      taxonomy_term_delete($node->field_directory_ids[LANGUAGE_NONE][0]['tid']);
    }
}
function get_query_depts($dept='VP for Student Affairs', $output='array') {
  $terms=array();
  $vid = variable_get('ua_organizations_vocabulary',0);
  $base_terms = taxonomy_get_term_by_name($dept, 'ua_organizations');
  if(!empty($base_terms)) {
    //should be one entry
    //dsm($base_terms);
    foreach($base_terms as $tid=>$base) {
      $terms = directory_taxonomy_get_children_all($tid, $vid);
    }
    //append the base term to the set
    //$terms[] = $term;
  }
  foreach($terms as $term) {
    $result[] = array($term->name, $term->description);
  }
  if ($output == 'text') {
    $results = '';
    foreach ($result as $item) {
      $results.=$item[0] . ': ' . $item[1] . '\n';
    }
    return $results;
  }
  else {
    return $result;
  }
}
function directory_taxonomy_get_children_all($tid, $vid = 0, $key = 'tid'){
$c = taxonomy_get_children($tid, $vid, $key);
$result = array();
foreach ($c as $t => $d){
$result[$t] = $d;
$below = directory_taxonomy_get_children_all($t, $vid, $key);
if (!empty($below)) {
foreach ($below as $nt => $nd){
$result[$nt] = $nd;
}
}
}
return $result;
}
/*
 * Implements hook_menu()
 */
function directory_menu() {
  $items = array(
    'd3-test' => array(
      'title' => 'D3 Force Diagram',
      'page callback' => 'directory_force_diagram',
      'access callback' => true,
      'type' => MENU_CALLBACK,
    ),
    'directory/json' =>array(
      'title' => 'UA Organizations',
      'page callback' => 'directory_items',
      'access callback' => true,
      'delivery callback' => 'drupal_json_output',
    ),
    'directory/test' => array(
      'title' => 'directory test',
      'page callback' => 'directory_test',
      'access callback' => true,
    ),
    'directory/sunburst' => array(
      'title' => 'directory sunburst',
      'page callback' => 'directory_sunburst',
      'access callback' => true,
    ),
    'directory/zoomtree' => array(
      'title' => 'directory zoomtree',
      'page callback' => 'directory_zoomtree',
      'access callback' => true,
    ),
    'directory/explore/%' => array(
      'page callback' => 'directory_explore',
      'page arguments' => array(2),
      'access callback' => true,
    ),
  );
 return $items;
}
/*
 * Implements hook_menu_alter
 */
function directory_menu_alter(&$items) {
  $items['taxonomy/term/%taxonomy_term']['page callback'] = 'directory_taxonomy_term_page';
  unset($items['taxonomy/term/%taxonomy_term']['file']);
}
/**
 * Create a single term and add to a specific vocabulary if not already present
 *  @vocab - the machine name of the vocabulary
 *  @term - the human readable name of the term to be added
 *
 *  @desc - the humna readable description of the term to be added (Optional)
 *  @weight - the weight of the term in the vocabulary list (Optional)
 */
function directory_create_term($vocab_name, $term, $desc = '', $weight = 0, $add_parent = 0)  {
  $added = NULL;
  $added = taxonomy_get_term_by_name($term);
  $vid = variable_get($vocab_name . '_vocabulary', 0);
  if ($added == '' || $added == NULL || $vid > 0)  {
    $new_term = array(
      'name' => $term,
      'description' => $desc,
      'parent' => array($add_parent),
      'weight' => $weight,
      'vid' => $vid,
    );
    $term_obj = (object) $new_term;
    taxonomy_term_save($term_obj);
    //in case you want it.
    if ($term_obj->tid > 0) {
      return $term_obj;
    }
    else { return 'trouble'; }
  }
}
function directory_total_term_items($tid) {

  $result = db_query('SELECT n.nid FROM taxonomy_index rd INNER JOIN node n ON rd.nid = n.nid WHERE rd.tid = :tid AND n.status = 1 ',
    array(':tid' => $tid));
  $count = count($result->fetchCol());
  return $count;

}
function directory_force_diagram() {
  //some javascript here.
  drupal_add_js('sites/all/libraries/d3/d3.js', 'file');
  drupal_add_js('sites/all/modules/directory/js/force.js', 'file');
  drupal_add_css('sites/all/modules/directory/css/force.css', 'file');
  //drupal_set_title('hi');
  return array(
    '#theme' => 'container',
    '#attributes' => array(
      'id' => 'diagram',
    ),
  );

}

//drupal stores parent. d3 wants children.
//so taxonomy_get_tree has depth as well.
function directory_items($vid = NULL) {
  if (is_null($vid)) {
     $vid = variable_get('ua_organizations_vocabulary');
    }
  $items = array();
  /*$query = "SELECT t.tid, t.name, v.name as vname, t.description, n.title, i.nid AS nid, h.parent AS ptid,
    NULL as children, NULL as parent
    FROM {taxonomy_term_data} t
    LEFT OUTER JOIN {taxonomy_term_hierarchy} h ON t.tid = h.tid
    LEFT OUTER JOIN {taxonomy_index} i ON t.tid = i.tid
    LEFT OUTER JOIN {node} n ON i.nid = n.nid AND n.type = :type
    LEFT OUTER JOIN {taxonomy_vocabulary} v ON t.vid = v.vid
    WHERE t.vid = :vid";*/
  $query = "SELECT t.tid, t.name, v.name as vocab, t.description, h.parent AS ptid,
    NULL as children, NULL as staff
    FROM {taxonomy_term_data} t
    INNER JOIN {taxonomy_term_hierarchy} h ON t.tid = h.tid
    INNER JOIN {taxonomy_vocabulary} v ON t.vid = v.vid
    WHERE t.vid = :vid";
  $result = db_query($query, array(':vid' => $vid));
  if ($result) {
    foreach($result->fetchAll() as $record) {
      $record->children=array();
      $record->staff = array();
      $items[]=$record;
    }
  }
  //directory entries are always leaves.
  //but give people their own category.

  for($j=0; $j < count($items); $j++) {

    /*for each item, find its parent node and
    1)assign it to the parent attribute,
    and
    2) push self to its parent's children attrribute.

    Special: the root node UNAZ should have no parent.
    */
    for($i=0; $i < count($items); $i++) {
      //if ( dataset[i].id == dataset[j].parentId ) {
      if ( $items[$j]->description == 'UNAZ' ) {
        $root = &$items[$j];
      }
      else {
        if ( $items[$i]->tid == $items[$j]->ptid ) {
          $items[$i]->children[] = &$items[$j];
        }
      }
    }
    //foreach item, see if there are content nodes attached and if so,
    //load them into the staff array.
    $result = db_query(
      "SELECT nid FROM {taxonomy_index} WHERE tid = :tid",
      array(':tid' => $items[$j]->tid));
    if ($result) {
      foreach(node_load_multiple($result->fetchCol()) as $node) {
        $items[$j]->children[] = $node;
      }
    }
  }
  return $root;
}
function directory_sunburst() {
  //some javascript here.
  drupal_add_js('sites/all/libraries/d3.v3/d3.v3.min.js', 'file');
  drupal_add_js('sites/all/modules/directory/js/sunburst.js', 'file');
  drupal_add_css('sites/all/modules/directory/css/sunburst.css', 'file');
  //drupal_set_title('hi');
  return array(
    '#theme' => 'container',
    '#attributes' => array(
      'id' => 'sunburst',
    )
  );

}
function directory_zoomtree() {
  //some javascript here.
  drupal_add_js('sites/all/libraries/d3.v3/d3.v3.min.js', 'file');
  drupal_add_js('sites/all/modules/directory/js/zoomtree.js', 'file');
  drupal_add_css('sites/all/modules/directory/css/zoomtree.css', 'file');
  //drupal_set_title('hi');
  return array(
    '#theme' => 'container',
    '#attributes' => array(
      'id' => 'zoomtree',
    )
  );
}


function directory_test() {
  //some javascript here.
  drupal_add_js('sites/all/libraries/d3.v3/d3.v3.min.js', 'file');
  drupal_add_js('sites/all/modules/directory/js/tree.js', 'file');
  drupal_add_css('sites/all/modules/directory/css/tree.css', 'file');
  //drupal_set_title('hi');
  return array(
    '#theme' => 'container',
    '#attributes' => array(
      'id' => 'tree',
    )
  );

}
/*
 * directory_taxonomy_term_page($term)
 * This overrides the default delivered term page. It is additive rather
 * than subtractive. It adds any terms at the top that are children of the
 * selected term to support navigation of hierarchical vocabularies.
 */
function directory_taxonomy_term_page($term) {
  //lift the delivered code...overrides are marked below in context
  // If there is a menu link to this term, the link becomes the last part of
  // the active trail, and the link name becomes the page title. Thus, we must
  // explicitly set the page title to be the term title.
  drupal_set_title($term->name);

  // Build breadcrumb based on the hierarchy of the term.
  $current = (object) array(
    'tid' => $term->tid,
  );
  // @todo This overrides any other possible breadcrumb and is a pure hard-coded
  //   presumption. Make this behavior configurable per vocabulary or term.
  $breadcrumb = array();
  while ($parents = taxonomy_get_parents($current->tid)) {
    $current = array_shift($parents);
    $breadcrumb[] = l($current->name, 'taxonomy/term/' . $current->tid);
  }
  $breadcrumb[] = l(t('Home'), NULL);
  $breadcrumb = array_reverse($breadcrumb);
  drupal_set_breadcrumb($breadcrumb);
  drupal_add_feed('taxonomy/term/' . $term->tid . '/feed', 'RSS - ' . $term->name);

  // Set the term path as the canonical URL to prevent duplicate content.
  $uri = entity_uri('taxonomy_term', $term);
  drupal_add_html_head_link(array('rel' => 'canonical', 'href' => url($uri['path'], $uri['options'])), TRUE);
  // Set the non-aliased path as a default shortlink.
  drupal_add_html_head_link(array('rel' => 'shortlink', 'href' => url($uri['path'], array_merge($uri['options'], array('alias' => TRUE)))), TRUE);

  // Normally we would call taxonomy_term_show() here, but for backwards
  // compatibility in Drupal 7 we do not want to do that (it produces different
  // data structures and HTML markup than what Drupal 7 released with). Calling
  // taxonomy_term_view() directly provides essentially the same thing, but
  // allows us to wrap the rendered term in our desired array structure.
  $build['term_heading'] = array(
    '#prefix' => '<div class="term-listing-heading">',
    '#suffix' => '</div>',
    'term' => taxonomy_term_view($term, 'full'),
  );
  //directory module additions.
  $vocabulary = taxonomy_vocabulary_load($term->vid);
  //show the immediate children of the term if there are any.
  $children = taxonomy_get_tree($term->vid, $term->tid, 1);
  if(!empty($children)) {
    //children is an array of terms.
    $child_links = array();
    foreach($children as $child) {
      $child_links[] = l($child->name, 'taxonomy/term/' . $child->tid);
    }
    $build['direct_children'] = array(
      '#theme' => 'item_list',
      '#title' => 'Child Terms',
      '#type' => 'ul',
      '#items' => $child_links,
      '#prefix' => '<div id="child-terms-div">',
      '#suffix' => '</div>',
    );
  }
  //todo. the vocabulary variable should store the name of the field.
  //It already does.
  // Name convention is field_machine_name Then I can
  //use it here to limit hte return set. as it is it returns all nodes. cant derive
  //it from code because the same vocab could be used in more than one field instance.
  //for this purpose don't re use vocabs.
  if ($nids = taxonomy_select_nodes($term->tid, FALSE)) {
    $nodes = node_load_multiple($nids);
    $first = current($nodes);
    if ($first->type == 'directory_profile') {
      $nodes = directory_node_sort($nodes);
    //dsm(directory_node_sort($nodes));
      $build += node_view_multiple($nodes, 'contact_card');
    }
    else
    {
      $build += node_view_multiple($nodes);
    }
  }
  else {
    $build['no_content'] = array(
      '#prefix' => '<p>',
      '#markup' => t('There is currently no content classified with this term.'),
      '#suffix' => '</p>',
    );
  }
  return $build;
}

/**
* Implements hook_entity_info_alter().
*/
function directory_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['contact_card'] = array(
    'label' => t('Contact Card'),
    'custom settings' => TRUE,
  );
}
function directory_node_sort($nodes) {
  $sorted=array();
  foreach ($nodes as $nid=>$node) {
    $last_name[$nid] = $node->field_last_name[LANGUAGE_NONE][0]['value'];
    $first_name[$nid] = $node->field_first_name[LANGUAGE_NONE][0]['value'];
  }
  array_multisort($last_name, SORT_ASC, $first_name, SORT_ASC, $nodes);
  foreach($nodes as $node) {
    $sorted[$node->nid] = $node;
  }
  return $sorted;
}
function directory_explore($arg = NULL) {
  switch ($arg) {
    case 'zoompartition':
      drupal_set_title('Zoomable Partitions');
    break;
    case 'zoomtree':
    default:
    $arg = 'zoomtree';
  }

  drupal_add_js('sites/all/libraries/d3.v3/d3.v3.min.js', 'file');
  drupal_add_js('sites/all/modules/directory/js/' . $arg . '.js', 'file');
  drupal_add_css('sites/all/modules/directory/css/' . $arg . '.css', 'file');
  //drupal_set_title('hi');
  return array(
    '#theme' => 'container',
    '#attributes' => array(
      'id' => $arg,
    )
  );
}
